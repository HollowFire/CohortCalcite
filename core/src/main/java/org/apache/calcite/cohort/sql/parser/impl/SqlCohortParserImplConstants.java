/* Generated By:JavaCC: Do not edit this line. SqlCohortParserImplConstants.java */
package org.apache.calcite.cohort.sql.parser.impl;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SqlCohortParserImplConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CSELECT = 6;
  /** RegularExpression Id. */
  int FROM = 7;
  /** RegularExpression Id. */
  int ACTION = 8;
  /** RegularExpression Id. */
  int BIRTH = 9;
  /** RegularExpression Id. */
  int COHORT = 10;
  /** RegularExpression Id. */
  int BY = 11;
  /** RegularExpression Id. */
  int AGE = 12;
  /** RegularExpression Id. */
  int AS = 13;
  /** RegularExpression Id. */
  int ACTIVITIES = 14;
  /** RegularExpression Id. */
  int IN = 15;
  /** RegularExpression Id. */
  int COHORTSIZE = 16;
  /** RegularExpression Id. */
  int USERCOUNT = 17;
  /** RegularExpression Id. */
  int MIN = 18;
  /** RegularExpression Id. */
  int MAX = 19;
  /** RegularExpression Id. */
  int AVG = 20;
  /** RegularExpression Id. */
  int BETWEEN = 21;
  /** RegularExpression Id. */
  int SUM = 22;
  /** RegularExpression Id. */
  int EQ = 23;
  /** RegularExpression Id. */
  int GT = 24;
  /** RegularExpression Id. */
  int LT = 25;
  /** RegularExpression Id. */
  int LE = 26;
  /** RegularExpression Id. */
  int GE = 27;
  /** RegularExpression Id. */
  int NE = 28;
  /** RegularExpression Id. */
  int AND = 29;
  /** RegularExpression Id. */
  int OR = 30;
  /** RegularExpression Id. */
  int LPAREN = 31;
  /** RegularExpression Id. */
  int RPAREN = 32;
  /** RegularExpression Id. */
  int LBRACE = 33;
  /** RegularExpression Id. */
  int RBRACE = 34;
  /** RegularExpression Id. */
  int LBRACKET = 35;
  /** RegularExpression Id. */
  int RBRACKET = 36;
  /** RegularExpression Id. */
  int COMMA = 37;
  /** RegularExpression Id. */
  int IDENTIFIER = 38;
  /** RegularExpression Id. */
  int LETTER = 39;
  /** RegularExpression Id. */
  int DIGIT = 40;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE = 41;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE_STRING = 42;
  /** RegularExpression Id. */
  int QUOTE_STRING = 43;
  /** RegularExpression Id. */
  int UNQUOTED_STRING = 44;
  /** RegularExpression Id. */
  int ESC_SEQ = 45;
  /** RegularExpression Id. */
  int OCTAL_ESC = 46;
  /** RegularExpression Id. */
  int UNICODE_ESC = 47;
  /** RegularExpression Id. */
  int HEX_DIGIT = 48;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"CSELECT\"",
    "\"FROM\"",
    "\"ACTION\"",
    "\"BIRTH\"",
    "\"COHORT\"",
    "\"BY\"",
    "\"AGE\"",
    "\"AS\"",
    "\"ACTIVITIES\"",
    "\"IN\"",
    "\"COHORTSIZE\"",
    "\"UserCount\"",
    "\"MIN\"",
    "\"MAX\"",
    "\"AVG\"",
    "\"BETWEEN\"",
    "\"SUM\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"AND\"",
    "\"OR\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"\\\"\"",
    "<DOUBLE_QUOTE_STRING>",
    "<QUOTE_STRING>",
    "<UNQUOTED_STRING>",
    "<ESC_SEQ>",
    "<OCTAL_ESC>",
    "<UNICODE_ESC>",
    "<HEX_DIGIT>",
  };

}
